// package main

// import (
// 	"bytes"
// 	"encoding/json"
// 	"io"
// 	"io/ioutil"
// 	"log"
// 	"os"
// 	"path/filepath"
// 	"regexp"
// 	"strings"

// 	"github.com/russross/blackfriday/v2"
// 	"github.com/yuin/goldmark"
// 	"github.com/zserge/webview"
// )

// type document struct {
// 	Path    string `json:"path"`
// 	DateStr string `json:"dateStr"`
// 	Content string `json:"content"`
// 	HTML    string `json:"html"`
// }

// type documentsResponse struct {
// 	Docs []*document `json:"docs"`
// }

// func fookThis(node *blackfriday.Node, entering bool) blackfriday.WalkStatus {

// 	log.Print(string(node.Title))
// 	log.Print(string(node.Literal))
// 	log.Print(json.Marshal(node))
// 	return 0
// }

// // return html and raw content
// func getMarkdown(path string) (string, string) {
// 	var buf bytes.Buffer
// 	content, err := ioutil.ReadFile(path)
// 	if err != nil {
// 		panic(err)
// 	}

// 	if err = goldmark.Convert(content, &buf); err != nil {
// 		panic(err)
// 	}

// 	// log.Print("Goldmark")
// 	// log.Print(buf.String())
// 	return buf.String(), string(content)
// }

// func doStuff2() {
// 	parser := blackfriday.New()
// 	content, _ := ioutil.ReadFile("/Users/cloverich/Google Drive/notes/chronicles/2020/01/2020-01-25.md")
// 	output2 := parser.Parse(content)

// 	output2.Walk(fookThis)
// }

// func makeHTML(contents []string) {

// 	css, err := ioutil.ReadFile("style.css")
// 	if err != nil {
// 		log.Fatalln("Error reading css file")
// 		panic(err)
// 	}

// 	f, err := os.OpenFile("output.html",
// 		os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
// 	if err != nil {
// 		log.Println(err)
// 	}
// 	defer f.Close()
// 	if _, err := f.WriteString("<html><head>"); err != nil {
// 		panic(err)
// 	}

// 	if _, err := f.Write(css); err != nil {
// 		panic(err)
// 	}

// 	if _, err := f.WriteString("</head><body style=\"margin-left: auto; margin-right: auto; max-width: 42.25rem; padding: 2.4375rem 1.21875rem; display: flex; flex-direction: column; justify-content: space-between; height: 100%;\">"); err != nil {
// 		panic(err)
// 	}

// 	for _, content := range contents {
// 		if _, err := f.WriteString(content); err != nil {
// 			panic(err)
// 		}
// 	}

// 	if _, err := f.WriteString("</body></html>"); err != nil {
// 		panic(err)
// 	}

// }

// func main() {

// 	matcher, err := regexp.Compile(`.*\d{4}-\d{2}-\d{2}.md`)
// 	if err != nil {
// 		log.Fatal(err)
// 		panic("Could not create regexp to match filenames")
// 	}

// 	paths := make([]string, 0)

// 	filepath.Walk("/Users/cloverich/Google Drive/notes/chronicles", func(path string, info os.FileInfo, err error) error {
// 		if err != nil {
// 			return err
// 		}

// 		if strings.Contains(path, "attachments") {
// 			return filepath.SkipDir
// 		}

// 		if info.IsDir() {
// 			return nil
// 		}

// 		// /Users/cloverich/Google Drive/notes/chronicles/2019/11/2019-11-14.md
// 		// /Users/cloverich/Google Drive/notes/chronicles/2019/12/.DS_Store
// 		// /Users/cloverich/Google Drive/notes/chronicles/Untitled.ipynb
// 		// \d{4}-\d{2}-\d{2}.md
// 		matched, err := regexp.Match(`.*\d{4}-\d{2}-\d{2}.md`, []byte(path))

// 		if err != nil {
// 			log.Fatalln(err)
// 		}

// 		if matched {
// 			paths = append(paths, path)
// 			if len(paths) >= 5 {
// 				return io.EOF
// 			}
// 		}

// 		return nil
// 	})

// 	docResponse := documentsResponse{Docs: make([]*document, 0)}
// 	// With paths, make objects..
// 	for _, path := range paths {
// 		filename := matcher.FindString(path)
// 		html, content := getMarkdown(path)
// 		doc := document{Content: content, Path: path, DateStr: filename, HTML: html}
// 		docResponse.Docs = append(docResponse.Docs, &doc)
// 	}

// 	res, err := json.MarshalIndent(docResponse, "", "    ")
// 	log.Print(string(res))

// 	// makeHTML(paths)

// 	// for _, path := range paths {
// 	// 	// log.Println(path)
// 	// }

// 	// log.Print(string(output2.String()))
// 	// output := blackfriday.Run(content)
// 	// log.Print(string(output))
// 	debug := true
// 	w := webview.New(debug)
// 	defer w.Destroy()
// 	w.SetTitle("Minimal webview example")
// 	w.SetSize(800, 600, webview.HintNone)
// 	w.Navigate("file:////Users/cloverich/Desktop/go-webview/output.html")
// 	w.Run()
// }
